(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var o=n(3),r=n(7),i=(n(0),n(94)),a={id:"your-first-codemod",title:"Your first codemod",slug:"/your-first-codemod"},l={unversionedId:"guides/your-first-codemod",id:"guides/your-first-codemod",isDocsHomePage:!1,title:"Your first codemod",description:"Every codemod follows the same series of operations: find, modify/insert, remove and finally output.",source:"@site/docs/guides/your-first-codemod.mdx",slug:"/your-first-codemod",permalink:"/CodeshiftCommunity/docs/your-first-codemod",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/master/website/docs/guides/your-first-codemod.mdx",version:"current",sidebar:"docs",previous:{title:"Contribution",permalink:"/CodeshiftCommunity/docs/contribution"},next:{title:"Understanding ASTs",permalink:"/CodeshiftCommunity/docs/understanding-asts"}},s=[{value:"Setup",id:"setup",children:[]},{value:"Find",id:"find",children:[]},{value:"Modify &amp; Insert",id:"modify--insert",children:[]},{value:"Remove",id:"remove",children:[]},{value:"Output",id:"output",children:[]}],c={toc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Every codemod follows the same series of operations: find, modify/insert, remove and finally output.\nThat's it. Once you know how to handle all of these operations you can do anything within a codemod."),Object(i.b)("h2",{id:"setup"},"Setup"),Object(i.b)("p",null,'Firstly you\'ll need to create a new file which defines a "transform" function. A transform is simply a javascript function which serves as the entry-point for your codemod.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"export default function transform(file, { jscodeshift: j }, options) {\n  //... codemod goes here\n}\n")),Object(i.b)("h2",{id:"find"},"Find"),Object(i.b)("p",null,"When trying to locate specific nodes in your AST, it helps to think about it like finding DOM nodes with jQuery.\nEvery node has a ",Object(i.b)("inlineCode",{parentName:"p"},"type")," and in most cases it's as simple a 'finding' all of the nodes in your AST that match that type, then filtering by an attribute of that node to determine if it's the one you're looking for."),Object(i.b)("p",null,"Given this file, let's try and locate a ",Object(i.b)("inlineCode",{parentName:"p"},"ImportDeclaration")," with the source ",Object(i.b)("inlineCode",{parentName:"p"},"my-module"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { foo, bar } from 'my-module'; // We're looking for this one\nimport { cheese, burger } from 'not-my-module'; // Not this one\n")),Object(i.b)("p",null,"Our transform will look something like this."),Object(i.b)("p",null,"(1) First we'll create an AST, (2) second we'll look at all nodes and return only nodes that match the ",Object(i.b)("inlineCode",{parentName:"p"},"ImportDeclaration")," and then (3) we'll filter all imports by their source values."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"export default function transform(file, { jscodeshift: j }, options) {\n  const source = j(file.source); // (1) Create an AST of the fiven file\n\n  const imports = source\n    .find(j.ImportDeclaration) // (2) Find all import declarations!\n    .filter(path => path.node.source.value === 'my-module'); // (3) Get only imports that have a source that matches what I'm looking for\n\n  console.log(imports); // Log our found node!\n\n  return source.toSource(options.printOptions); // We return the modified file\n}\n")),Object(i.b)("h2",{id:"modify--insert"},"Modify & Insert"),Object(i.b)("p",null,"Now let's say that we want to pull in a new import from 'my-module' called ",Object(i.b)("inlineCode",{parentName:"p"},"baz"),". Luckily you've already written a majority of the code above.\nAll we'll need to do now is \"insert\" an new ImportSpecifier into the ImportDeclaration node that we've just retrieved."),Object(i.b)("p",null,"Now inserting can look a little awkward at first, because what we're really doing is building a new node based on what we've found and replacing it with a modified version of itself."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"export default function transform(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  const imports = source\n    .find(j.ImportDeclaration)\n    .filter(path => path.node.source.value === 'my-module');\n\n  const myNewImportSpecifier = j.importSpecifier(j.identifier('baz')); // (1) Build a new import specifier called \"baz\"\n\n  imports.array.forEach(moduleImport => {\n    // (4) Replace the node we found earlier with its modified counterpart\n    moduleImport.replaceWith(\n      // (2) Build a new import declaration based on the old one we found\n      j.importDeclaration(\n        [...moduleImport.node.specifiers, myNewImportSpecifier], // (3) Insert our new import specificer\n        reactImport.node.source, // Copy across other relevant attributes unchanged\n      ),\n    );\n  });\n\n  return source.toSource(options.printOptions);\n}\n")),Object(i.b)("p",null,"Now there are a few moving pieces in this example, let's step through them:"),Object(i.b)("p",null,'(1) Here we "build" a new node of type ',Object(i.b)("inlineCode",{parentName:"p"},"ImportSpecifier"),"."),Object(i.b)("p",null,"You can build a node by using the camelCase variant methos of a node type.\nSo to build an ",Object(i.b)("inlineCode",{parentName:"p"},"ImportSpecifier")," you use ",Object(i.b)("inlineCode",{parentName:"p"},"j.importSpecifier(...)")," and when you want to search for one, you use the CapitalCase variant ",Object(i.b)("inlineCode",{parentName:"p"},"j.ImportSpecifier"),"."),Object(i.b)("p",null,"(2) Create a new import declaration"),Object(i.b)("p",null,"Similar to (1), we build a new import declaration. We do this because in jscodeshift there's no way to mutate attributes of a node, instead we must use the ",Object(i.b)("inlineCode",{parentName:"p"},"replaceWith()")," method.\nSo we create a new node, taking attributes from the old one and making modifications where necessary."),Object(i.b)("p",null,"(3) Insert our new import specifier"),Object(i.b)("p",null,"Here we push our new import specifier into the array of existing specifiers."),Object(i.b)("p",null,"(4) Replace the node"),Object(i.b)("p",null,"Finally we replace our ImportDeclaration with our new one and the resulting output should look like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"-import { foo, bar } from 'my-module';\n+import { foo, bar, baz } from 'my-module';\nimport { cheese, burger } from 'not-my-module';\n")),Object(i.b)("h2",{id:"remove"},"Remove"),Object(i.b)("p",null,"When removing a node, it's usually as simple as finding the node and calling ",Object(i.b)("inlineCode",{parentName:"p"},".remove()")," on it."),Object(i.b)("p",null,"So given this file, let's say that we're trying to remove the ",Object(i.b)("inlineCode",{parentName:"p"},"isDisabled")," prop on the ",Object(i.b)("inlineCode",{parentName:"p"},"Button")," component."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Button, InputField } from 'ui-lib';\n\nexport const App = props => {\n  return (\n    <>\n      <InputField value=\"Hello\" isDisabled />\n      <Button isDisabled>Submit</Button>\n    </>\n  );\n};\n")),Object(i.b)("p",null,'We\'ll need to (1) find all JSX props, (2) filter only props called "isDisabled", (3) finally, call ',Object(i.b)("inlineCode",{parentName:"p"},"remove()")," to delete them from the AST."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"export default function transform(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n    .find(j.JSXIdentifier) // (1) Find all JSX props\n    .filter(path => path.node.name === 'isDisabled') // (2) Filter by name `isDisabled`\n    .remove(); // (3) We remove any `isDisabled` prop from the AST\n\n  return source.toSource(options.printOptions);\n}\n")),Object(i.b)("p",null,"The result of this change will leave our file looking like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"import React from 'react';\nimport { Button, InputField } from 'ui-lib';\n\nexport const App = props => {\n  return (\n    <>\n-      <InputField value=\"Hello\" isDisabled />\n+      <InputField value=\"Hello\" />\n-      <Button isDisabled>Submit</Button>\n+      <Button>Submit</Button>\n    </>\n  );\n};\n")),Object(i.b)("p",null,"Now the important thing to note here is that both ",Object(i.b)("inlineCode",{parentName:"p"},"Button")," and ",Object(i.b)("inlineCode",{parentName:"p"},"InputField")," components lost the ",Object(i.b)("inlineCode",{parentName:"p"},"isDisabled")," prop.\nThat's because we haven't filtered by component name first. Let's fix that now."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"export default function transform(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n+   .find(j.JSXElement)\n+   .filter(path => path.value.openingElement.name.name === 'Button')\n    .find(j.JSXIdentifier) // (1) Find all JSX props\n    .filter(path => path.node.name === 'isDisabled') // (2) Filter by name `isDisabled`\n    .remove(); // (3) We remove any `isDisabled` prop from the AST\n\n  return source.toSource(options.printOptions);\n}\n")),Object(i.b)("p",null,"and finally our output file will look as expected!"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"import React from 'react';\nimport { Button, InputField } from 'ui-lib';\n\nexport const App = props => {\n  return (\n    <>\n      <InputField value=\"Hello\" isDisabled />\n-     <Button isDisabled>Submit</Button>\n+     <Button>Submit</Button>\n    </>\n  );\n};\n")),Object(i.b)("h2",{id:"output"},"Output"),Object(i.b)("p",null,"At the end of every transform, you'll need to call and return your modified AST. This is usually done via the ",Object(i.b)("inlineCode",{parentName:"p"},"toSource()")," method.\nWhen this function is called ",Object(i.b)("a",{parentName:"p",href:"https://github.com/benjamn/recast/"},"Recast")," will take your AST, turn it back into code, format it and output it to the source file.\nThe result of which will include all of the modifications you made."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"export default function transform(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  // ...\n\n  return source.toSource(options.printOptions); // Output your file here\n}\n")),Object(i.b)("p",null,"This method, accepts some ",Object(i.b)("a",{parentName:"p",href:"https://github.com/benjamn/recast/blob/52a7ec3eaaa37e78436841ed8afc948033a86252/lib/options.js#L61"},"options for formatting"),".\njscodeshift uses ",Object(i.b)("a",{parentName:"p",href:"https://github.com/benjamn/recast/"},"Recast")," under the hood, which tries its best to format output code as close to the original file as possible. But it's often good to run your formatter of choice after running the codemod to be completely sure."),Object(i.b)("p",null,"To avoid formatting issues and to speed up running transforms across large codebases, it's good practice to only modify the files you need to. For example, in cases where the code you want to change does not exist in the file you're attempting to transform, you should bail early and return the \"raw\" source file."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"export default function transform(file, { jscodeshift: j }, options) {\n  const hasIsDisabledProp = !!source\n    .find(j.JSXIdentifier)\n    .filter(path.node.name === 'isDisabled')\n    .length\n\n  if (!hasIsDisabledProp) {\n    return file.source; // Returns original source file, untouched and unformatted\n  }\n\n  // transform code goes here...\n\n  return source.toSource(options.printOptions);\n")))}u.isMDXComponent=!0},94:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(a,".").concat(m)]||p[m]||d[m]||i;return n?r.a.createElement(f,l(l({ref:t},c),{},{components:n})):r.a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);