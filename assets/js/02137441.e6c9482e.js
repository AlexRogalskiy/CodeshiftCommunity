(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var l=n(3),i=n(7),a=(n(0),n(98)),r={id:"cli",title:"codeshift/cli",slug:"/cli"},o={unversionedId:"api/cli",id:"api/cli",isDocsHomePage:!1,title:"codeshift/cli",description:"To download and run codemods, we provide a CLI tool called @codeshift/cli.",source:"@site/docs/api/codeshift-cli.mdx",slug:"/cli",permalink:"/docs/cli",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/main/website/docs/api/codeshift-cli.mdx",version:"current",sidebar:"api",next:{title:"codeshift/utils",permalink:"/docs/utils"}},c=[{value:"Usage/Installation",id:"usageinstallation",children:[]},{value:"Options",id:"options",children:[{value:"--transform, -t",id:"--transform--t",children:[]},{value:"--packages",id:"--packages",children:[]},{value:"--parser, -p",id:"--parser--p",children:[]},{value:"--extensions, -e",id:"--extensions--e",children:[]},{value:"--ignore-pattern",id:"--ignore-pattern",children:[]},{value:"--version, -v",id:"--version--v",children:[]},{value:"--help",id:"--help",children:[]}]},{value:"Commands",id:"commands",children:[{value:"list",id:"list",children:[]}]}],b={toc:c};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(l.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To download and run codemods, we provide a CLI tool called ",Object(a.b)("inlineCode",{parentName:"p"},"@codeshift/cli"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"@codeshift/cli")," is responsible for running the provided transform against your entire codebase.\nUnder the hood, it is a wrapper of jscodeshift's cli, which provides additional functionality"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Ability to run community codemods hosted on npm"),Object(a.b)("li",{parentName:"ol"},"Runs versioned codemods in sequence"),Object(a.b)("li",{parentName:"ol"},"Always runs the latest version of a codemod")),Object(a.b)("p",null,"The cli allows you to run transforms either from the ",Object(a.b)("a",{parentName:"p",href:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/tree/main/community"},"community folder")," or on your local machine as per the original implementation of jscodeshift"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," Codemods will be designed to do the heavy lifting, but they'll often not be perfect so some manual work may still be required in order to successfully migrate."),Object(a.b)("h2",{id:"usageinstallation"},"Usage/Installation"),Object(a.b)("p",null,"We recommend running the CLI with ",Object(a.b)("inlineCode",{parentName:"p"},"npx")," to ensure you always have the latest version."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"$ npx @codeshift/cli --packages mylib@1.0.0 /project/src")),Object(a.b)("p",null,"But it can also be installed normally:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"npm install -g @codeshift/cli")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn global add @codeshift/cli")),Object(a.b)("p",null,"Or globally:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"npm install --save-dev @codeshift/cli")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn add -D @codeshift/cli")),Object(a.b)("h2",{id:"options"},"Options"),Object(a.b)("h3",{id:"--transform--t"},"--transform, -t"),Object(a.b)("p",null,"The transform to run, transforms can be either a single file or directory with an index."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli --transform codemods/my-special-mod /project/src/file.js")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli --transform codemods/my-special-mod/index.ts /project/src/file.js"))),Object(a.b)("h3",{id:"--packages"},"--packages"),Object(a.b)("p",null,"Runs transforms for the specified comma separated list of packages, optionally include a version for each package to run all transforms since that version"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli --packages @atlaskit/button /project/src")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli --packages @atlaskit/button@3.0.0,@atlaskit/range@4.0.0 /project/src"))),Object(a.b)("h3",{id:"--parser--p"},"--parser, -p"),Object(a.b)("p",null,"Parser to use for parsing the source files you are code modding."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"options:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"babel (default)"),Object(a.b)("li",{parentName:"ul"},"babylon"),Object(a.b)("li",{parentName:"ul"},"flow"),Object(a.b)("li",{parentName:"ul"},"ts"),Object(a.b)("li",{parentName:"ul"},"tsx")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli --parser tsx /project/src/file.ts")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli -p babel /project/src/file.js"))),Object(a.b)("h3",{id:"--extensions--e"},"--extensions, -e"),Object(a.b)("p",null,"Transform files with these file extensions (comma separated list) (default: js)"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli --extensions ts,tsx /project/src/file.js")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npx @codeshift/cli -e js /project/src/file.js"))),Object(a.b)("h3",{id:"--ignore-pattern"},"--ignore-pattern"),Object(a.b)("p",null,"Ignore files that match a provided glob expression"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@codeshift/cli --ignore-pattern node_modules /project/src/file.js"))),Object(a.b)("h3",{id:"--version--v"},"--version, -v"),Object(a.b)("p",null,"Get current version number"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@codeshift/cli --version")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@codeshift/cli -v"))),Object(a.b)("h3",{id:"--help"},"--help"),Object(a.b)("p",null,"Print all help text to the command line"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@codeshift/cli --help"))),Object(a.b)("h2",{id:"commands"},"Commands"),Object(a.b)("h3",{id:"list"},"list"),Object(a.b)("p",null,"Lists available codemods for the provided packages"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"example:")),Object(a.b)("p",null,"Print a list of available codemods for a single package"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@codeshift/cli list mylib"))),Object(a.b)("p",null,"Print a list of available codemods for multiple packages"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"@codeshift/cli list mylib, @material-ui/button"))))}s.isMDXComponent=!0},98:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var l=n(0),i=n.n(l);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var b=i.a.createContext({}),s=function(e){var t=i.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,r=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(n),u=l,m=p["".concat(r,".").concat(u)]||p[u]||d[u]||a;return n?i.a.createElement(m,o(o({ref:t},b),{},{components:n})):i.a.createElement(m,o({ref:t},b))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var b=2;b<a;b++)r[b]=n[b];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);