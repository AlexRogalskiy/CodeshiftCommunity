(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{91:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return a})),n.d(e,"metadata",(function(){return s})),n.d(e,"toc",(function(){return p})),n.d(e,"default",(function(){return c}));var r=n(3),o=n(7),i=(n(0),n(98)),a={id:"test-utils",title:"codeshift/test-utils",slug:"/test-utils"},s={unversionedId:"api/test-utils",id:"api/test-utils",isDocsHomePage:!1,title:"codeshift/test-utils",description:"CodeshiftCommunity provides a set of test utilities to help unit test codemods.",source:"@site/docs/api/codeshift-test-utils.mdx",slug:"/test-utils",permalink:"/docs/test-utils",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/master/website/docs/api/codeshift-test-utils.mdx",version:"current",sidebar:"api",previous:{title:"codeshift/utils",permalink:"/docs/utils"}},p=[{value:"Installation",id:"installation",children:[]},{value:"API",id:"api",children:[{value:"<code>applyTransform(transform, input, options = { parser: &#39;babel&#39; })</code>",id:"applytransformtransform-input-options---parser-babel-",children:[]}]}],l={toc:p};function c(t){var e=t.components,n=Object(o.a)(t,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"CodeshiftCommunity provides a set of test utilities to help unit test codemods."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@codeshift/test-utils")," is pre-bundled with every codemod that is published to the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/tree/main/community"},"community folder"),",\nso there's no need to install it manually."),Object(i.b)("p",null,"However, it is also available for use outside of this project and compatible with jscodeshift."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"npm install --save-dev @codeshift/test-utils")," or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn add -D @codeshift/test-utils")),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("h3",{id:"applytransformtransform-input-options---parser-babel-"},Object(i.b)("inlineCode",{parentName:"h3"},"applyTransform(transform, input, options = { parser: 'babel' })")),Object(i.b)("p",null,"Runs a transform against the provided code and returns the resulting file."),Object(i.b)("p",null,"We provide this method as opposed to ",Object(i.b)("a",{parentName:"p",href:"https://github.com/facebook/jscodeshift#unit-testing"},"jscodeshift's test utils")," to maintain jest's skip/only and snapshot features"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"string"),": Resulting file after transform has been applied"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import * as transformer from '../transform';\nimport { applyTransform } from '@codeshift/test-utils';\n\nit('should wrap avatar in a tooltip if name is defined', () => {\n  const result = applyTransform(\n    transformer,\n    `\n      import Avatar from 'avatar';\n\n      const App = () => {\n        return <Avatar name=\"foo\" />;\n      }\n    `,\n    { parser: 'tsx' },\n  );\n\n  expect(result).toMatchInlineSnapshot(`\n    \"import Tooltip from 'tooltip';\n    import Avatar from 'avatar';\n\n    const App = () => {\n      return <Tooltip content=\\\\\"foo\\\\\"><Avatar name=\\\\\"foo\\\\\" /></Tooltip>;\n    }\"\n  `);\n")))}c.isMDXComponent=!0},98:function(t,e,n){"use strict";n.d(e,"a",(function(){return u})),n.d(e,"b",(function(){return m}));var r=n(0),o=n.n(r);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=o.a.createContext({}),c=function(t){var e=o.a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=c(t.components);return o.a.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return o.a.createElement(o.a.Fragment,{},e)}},f=o.a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,a=t.parentName,l=p(t,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(a,".").concat(f)]||u[f]||d[f]||i;return n?o.a.createElement(m,s(s({ref:e},l),{},{components:n})):o.a.createElement(m,s({ref:e},l))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);