(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[544],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?l.createElement(k,r(r({ref:t},c),{},{components:n})):l.createElement(k,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<a;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6809:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},metadata:function(){return o},toc:function(){return s},default:function(){return c}});var l=n(2122),i=n(9756),a=(n(7294),n(3905)),r={id:"cli",title:"codeshift/cli",slug:"/cli"},o={unversionedId:"api/cli",id:"api/cli",isDocsHomePage:!1,title:"codeshift/cli",description:"To download and run codemods, we provide a CLI tool called @codeshift/cli.",source:"@site/docs/api/codeshift-cli.mdx",sourceDirName:"api",slug:"/cli",permalink:"/docs/cli",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/main/website/docs/api/codeshift-cli.mdx",version:"current",frontMatter:{id:"cli",title:"codeshift/cli",slug:"/cli"},sidebar:"api",next:{title:"codeshift/utils",permalink:"/docs/utils"}},s=[{value:"Usage/Installation",id:"usageinstallation",children:[]},{value:"Options",id:"options",children:[{value:"--transform, -t",id:"--transform--t",children:[]},{value:"--packages",id:"--packages",children:[]},{value:"--parser, -p",id:"--parser--p",children:[]},{value:"--extensions, -e",id:"--extensions--e",children:[]},{value:"--ignore-pattern",id:"--ignore-pattern",children:[]},{value:"--version, -v",id:"--version--v",children:[]},{value:"--help",id:"--help",children:[]}]},{value:"Commands",id:"commands",children:[{value:"list",id:"list",children:[]},{value:"init",id:"init",children:[]},{value:"validate",id:"validate",children:[]}]}],p={toc:s};function c(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To download and run codemods, we provide a CLI tool called ",(0,a.kt)("inlineCode",{parentName:"p"},"@codeshift/cli"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@codeshift/cli")," is responsible for running the provided transform against your entire codebase.\nUnder the hood, it is a wrapper of jscodeshift's cli, which provides additional functionality"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Ability to run community codemods hosted on npm"),(0,a.kt)("li",{parentName:"ol"},"Runs versioned codemods in sequence"),(0,a.kt)("li",{parentName:"ol"},"Always runs the latest version of a codemod")),(0,a.kt)("p",null,"The cli allows you to run transforms either from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/tree/main/community"},"community folder")," or on your local machine as per the original implementation of jscodeshift"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," Codemods will be designed to do the heavy lifting, but they'll often not be perfect so some manual work may still be required in order to successfully migrate."),(0,a.kt)("h2",{id:"usageinstallation"},"Usage/Installation"),(0,a.kt)("p",null,"We recommend running the CLI with ",(0,a.kt)("inlineCode",{parentName:"p"},"$ npx")," to ensure you always have the latest version."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"$ npx @codeshift/cli --packages mylib@1.0.0 /project/src")),(0,a.kt)("p",null,"But it can also be installed normally:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"$ npm install --save-dev @codeshift/cli")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn add -D @codeshift/cli")),(0,a.kt)("p",null,"Or globally:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"$ npm install -g @codeshift/cli")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn global add @codeshift/cli")),(0,a.kt)("p",null,"and run with:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"$ codeshift-cli")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("h3",{id:"--transform--t"},"--transform, -t"),(0,a.kt)("p",null,"The transform to run, transforms can be either a single file or directory with an index."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --transform codemods/my-special-mod /project/src/file.js")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --transform codemods/my-special-mod/index.ts /project/src/file.js"))),(0,a.kt)("h3",{id:"--packages"},"--packages"),(0,a.kt)("p",null,"Runs transforms for the specified comma separated list of packages, optionally include a version for each package to run all transforms since that version"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --packages @atlaskit/button /project/src")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --packages @atlaskit/button@3.0.0,@atlaskit/range@4.0.0 /project/src"))),(0,a.kt)("h3",{id:"--parser--p"},"--parser, -p"),(0,a.kt)("p",null,"Parser to use for parsing the source files you are code modding."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"options:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"babel (default)"),(0,a.kt)("li",{parentName:"ul"},"babylon"),(0,a.kt)("li",{parentName:"ul"},"flow"),(0,a.kt)("li",{parentName:"ul"},"ts"),(0,a.kt)("li",{parentName:"ul"},"tsx")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --parser tsx /project/src/file.ts")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli -p babel /project/src/file.js"))),(0,a.kt)("h3",{id:"--extensions--e"},"--extensions, -e"),(0,a.kt)("p",null,"Transform files with these file extensions (comma separated list) (default: js)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --extensions ts,tsx /project/src/file.js")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli -e js /project/src/file.js"))),(0,a.kt)("h3",{id:"--ignore-pattern"},"--ignore-pattern"),(0,a.kt)("p",null,"Ignore files that match a provided glob expression"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --ignore-pattern node_modules /project/src/file.js"))),(0,a.kt)("h3",{id:"--version--v"},"--version, -v"),(0,a.kt)("p",null,"Get current version number"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --version")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli -v"))),(0,a.kt)("h3",{id:"--help"},"--help"),(0,a.kt)("p",null,"Print all help text to the command line"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli --help"))),(0,a.kt)("h2",{id:"commands"},"Commands"),(0,a.kt)("h3",{id:"list"},"list"),(0,a.kt)("p",null,"Lists available codemods for the provided packages"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("p",null,"Print a list of available codemods for a single package"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli list mylib"))),(0,a.kt)("p",null,"Print a list of available codemods for multiple packages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli list mylib, @material-ui/button"))),(0,a.kt)("h3",{id:"init"},"init"),(0,a.kt)("p",null,"Generates a new codemod at your desired path"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("p",null,"Create a new codemod package called foobar with a transform for version 10\non the Desktop"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'$ codeshift-cli init --packageName="foobar" --version"10.0.0" ~/Desktop'))),(0,a.kt)("h3",{id:"validate"},"validate"),(0,a.kt)("p",null,"Validates a codemod package at the desired path."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example:")),(0,a.kt)("p",null,'Validate a codemod package called "my-codemods".'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli validate ./codemods/my-codemods"))),(0,a.kt)("p",null,"Validate a codemod package from the current working directory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ codeshift-cli validate"))))}c.isMDXComponent=!0}}]);