(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[638],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8081:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={id:"authoring",title:"Authoring",slug:"/authoring"},s={unversionedId:"authoring",id:"authoring",isDocsHomePage:!1,title:"Authoring",description:"Before writing a codemod, please read the contribution guide \ud83d\ude4f",source:"@site/docs/authoring.mdx",sourceDirName:".",slug:"/authoring",permalink:"/docs/authoring",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/main/website/docs/authoring.mdx",version:"current",frontMatter:{id:"authoring",title:"Authoring",slug:"/authoring"},sidebar:"docs",previous:{title:"Glossary",permalink:"/docs/glossary"},next:{title:"Consuming",permalink:"/docs/consuming"}},l=[{value:"Initializing",id:"initializing",children:[]},{value:"File structure",id:"file-structure",children:[]},{value:"Versioning",id:"versioning",children:[]},{value:"Transformers",id:"transformers",children:[]},{value:"Motions",id:"motions",children:[]},{value:"Testing",id:"testing",children:[]}],u={toc:l};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Before writing a codemod, please read the ",(0,i.kt)("a",{parentName:"p",href:"docs/contribution"},"contribution guide")," \ud83d\ude4f"),(0,i.kt)("h2",{id:"initializing"},"Initializing"),(0,i.kt)("p",null,"Create a folder structure for your new codemod by running:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yarn codeshift:init -p [package-name] -v [version]")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yarn init:codemods react-cool-library 10.0.0")),(0,i.kt)("p",null,"And for scoped packages:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yarn init:codemods @scope/react-cool-library 10.0.0")),(0,i.kt)("p",null,"It will create a package within the ",(0,i.kt)("inlineCode",{parentName:"p"},"/community")," subdirectory, this is for you to implement your codemod."),(0,i.kt)("h2",{id:"file-structure"},"File structure"),(0,i.kt)("p",null,"The file structure of your codemod will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"community/[package-name]/[version]\n  /transform.ts // main entrypoint (should contain a transform)\n  /transform.spec.ts // main tests\n  /motions // different operations that make up the codemod\n    /[motion-name].ts // motion\n    /[motion-name].spec.ts // motion tests\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"community/react-cool-library/18.0.0\n  /transform.ts\n  /transform.spec.ts\n  /motions\n    /remove-ref-usage.ts\n    /remove-ref-usage.spec.ts\n")),(0,i.kt)("h2",{id:"versioning"},"Versioning"),(0,i.kt)("p",null,"You might wonder why we require that codemods are named by a semver version like ",(0,i.kt)("inlineCode",{parentName:"p"},"react-cool-library/18.0.0"),".\nWe believe that codemods should aim to target specific package and versions of that package."),(0,i.kt)("p",null,"This is done to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Make it obvious what the intended purpose and scope of a codemod is"),(0,i.kt)("li",{parentName:"ul"},"Make it obvious which package is being upgraded"),(0,i.kt)("li",{parentName:"ul"},"Make it easy to play codemods in sequence to allow migration from v4 -> v5 -> v6")),(0,i.kt)("p",null,"But importantly, in terms of authoring, this also allows us to ",(0,i.kt)("strong",{parentName:"p"},"retrospectivally patch published codemods"),".\nPatched codemods will then be automatically published when merged to the repo, ensuring that consumers are always running the latest version."),(0,i.kt)("h2",{id:"transformers"},"Transformers"),(0,i.kt)("p",null,"Transformers are the main entrypoint to your codemod, they are responsible for accepting a raw file and applying the appropriate modifications to it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasImportDeclaration } from '@codeshift/utils';\nimport updateBorderWidth from './motions/update-border-width';\n\nexport default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  if (hasImportDeclaration(j, source, '@atlaskit/avatar')) {\n    // Checks if the file needs to be modified\n    updateBorderWidth(j, source); // Execute individual motions\n\n    return source.toSource(options.printOptions || { quote: 'single' }); // Writes modified AST to file\n  }\n\n  return file.source; // Writes original untouched file\n}\n")),(0,i.kt)("h2",{id:"motions"},"Motions"),(0,i.kt)("p",null,"A motion (aka migration) is what we call specific actions performed within a codemod. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"updateBorderWidth")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"removeDeprecatedProps"),".\nThey can be simply thought of a functions that are responsible for a single action within a codemod. It is not required but they are a helpful design pattern to isolate more complicated parts of your codemod into discrete pieces."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"function removeDeprecatedProps(\n  j: core.JSCodeshift,\n  source: ReturnType<typeof j>,\n) {\n  // TODO:\n}\n")),(0,i.kt)("h2",{id:"testing"},"Testing"),(0,i.kt)("p",null,"It's very likely that consumers will run into all sorts of edge-cases when running your transform. That's why it's important to start by writing some tests to assert it's behavior. Luckily, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/jscodeshift#unit-testing"},"jscodeshift provides some testing utilities"),"."),(0,i.kt)("p",null,"When creating a codemod, it's best to always try to write your tests first (TDD style). Think about the start and end state and how you might be able to achieve that. Also, make sure to consider as many edge-cases as you possibly can."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const defineInlineTest = require('jscodeshift/dist/testUtils').defineInlineTest;\nconst transform = require('../myTransform');\nconst transformOptions = {};\n\ndefineInlineTest(\n  transform,\n  transformOptions,\n  'input',\n  'expected output',\n  'test name (optional)',\n);\n")),(0,i.kt)("p",null,"For more information, please see the ",(0,i.kt)("a",{parentName:"p",href:"testing"},"testing docs"),"."))}c.isMDXComponent=!0}}]);