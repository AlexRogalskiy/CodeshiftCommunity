(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(3),i=n(7),o=(n(0),n(94)),a={id:"import-manipulation",title:"Import manipulation",slug:"/import-manipulation"},c={unversionedId:"recipes/import-manipulation",id:"recipes/import-manipulation",isDocsHomePage:!1,title:"Import manipulation",description:"Manipulating imports will likely be one of the first and most common operations you do when writing codemods.",source:"@site/docs/recipes/import-manipulation.mdx",slug:"/import-manipulation",permalink:"/CodeshiftCommunity/docs/import-manipulation",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/master/website/docs/recipes/import-manipulation.mdx",version:"current",sidebar:"docs",previous:{title:"Prompting for human input",permalink:"/CodeshiftCommunity/docs/prompting-for-human-input"},next:{title:"React prop manipulation",permalink:"/CodeshiftCommunity/docs/prop-manipulation"}},p=[{value:"Import declarations",id:"import-declarations",children:[{value:"Checking for an import declaration",id:"checking-for-an-import-declaration",children:[]},{value:"Inserting an import declaration",id:"inserting-an-import-declaration",children:[]},{value:"Inserting an import declaration before/after a node",id:"inserting-an-import-declaration-beforeafter-a-node",children:[]},{value:"Removing an import declaration",id:"removing-an-import-declaration",children:[]},{value:"Replacing an import declaration",id:"replacing-an-import-declaration",children:[]}]},{value:"Import specifiers",id:"import-specifiers",children:[{value:"Checking for an import specifiers",id:"checking-for-an-import-specifiers",children:[]},{value:"Adding an import specifiers",id:"adding-an-import-specifiers",children:[]},{value:"Removing an import specifiers",id:"removing-an-import-specifiers",children:[]},{value:"Replacing an import specifiers",id:"replacing-an-import-specifiers",children:[]}]},{value:"Default import specifiers",id:"default-import-specifiers",children:[{value:"Checking for an Default import specifiers",id:"checking-for-an-default-import-specifiers",children:[]},{value:"Adding an Default import specifiers",id:"adding-an-default-import-specifiers",children:[]},{value:"Removing an Default import specifiers",id:"removing-an-default-import-specifiers",children:[]},{value:"Replacing an Default import specifiers",id:"replacing-an-default-import-specifiers",children:[]}]}],l={toc:p};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Manipulating imports will likely be one of the first and most common operations you do when writing codemods."),Object(o.b)("h2",{id:"import-declarations"},"Import declarations"),Object(o.b)("p",null,"An ",Object(o.b)("inlineCode",{parentName:"p"},"ImportDeclaration")," refers to an entire import statement for example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import React, { useEffect } from 'react';\n")),Object(o.b)("p",null,"The anatomy of an ",Object(o.b)("inlineCode",{parentName:"p"},"ImportDeclaration")," includes:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"An array of ",Object(o.b)("inlineCode",{parentName:"li"},"specifiers"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ImportDefaultSpecifier"),": ",Object(o.b)("inlineCode",{parentName:"li"},"React")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ImportSpecifier"),": ",Object(o.b)("inlineCode",{parentName:"li"},"useEffect")))),Object(o.b)("li",{parentName:"ul"},"A ",Object(o.b)("inlineCode",{parentName:"li"},"source")," which can either be a module name or path: ",Object(o.b)("inlineCode",{parentName:"li"},"react"))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note: ",Object(o.b)("inlineCode",{parentName:"strong"},"@codeshift/utils")," provides utilities for import manipulation, please see the docs")),Object(o.b)("h3",{id:"checking-for-an-import-declaration"},"Checking for an import declaration"),Object(o.b)("p",null,"Import declarations can be found with the ",Object(o.b)("inlineCode",{parentName:"p"},"jscodeshift.ImportDeclaration")," type."),Object(o.b)("p",null,"In this example we're seaching this file for the ",Object(o.b)("inlineCode",{parentName:"p"},"React")," import."),Object(o.b)("p",null,"Input:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("p",null,"Transform:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"export default function transformer(fileInfo, { jscodeshift: j }, options) {\n  const source = j(fileInfo.source);\n\n  const reactImportDeclaration = source\n    .find(j.ImportDeclaration) // Find all nodes that match a type of `ImportDeclaration`\n    .filter(path => path.node.source.value === 'react'); // Filter imports by source equal to the target ie \"react\"\n\n  // Do something here\n  console.log(reactImportDeclaration);\n\n  return source.toSource();\n}\n")),Object(o.b)("p",null,"Output (unchanged):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("h3",{id:"inserting-an-import-declaration"},"Inserting an import declaration"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("p",null,"Transform:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"export default function transformer(fileInfo, { jscodeshift: j }, options) {\n  const source = j(fileInfo.source);\n\n  // Build a new import\n  const newImport = j.importDeclaration(\n    [j.importDefaultSpecifier(j.identifier('Foo'))],\n    j.stringLiteral('bar'),\n  );\n\n  // Insert it at the top of the document\n  source.get().node.program.body.unshift(newImport);\n\n  return source.toSource();\n}\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-diff"},"+import Foo from 'bar';\nimport React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("h3",{id:"inserting-an-import-declaration-beforeafter-a-node"},"Inserting an import declaration before/after a node"),Object(o.b)("p",null,"Sometimes you might want to insert an import before another import.\nFor that you can use ",Object(o.b)("inlineCode",{parentName:"p"},"insertBefore"),", ",Object(o.b)("inlineCode",{parentName:"p"},"insertAfter")," methods."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("p",null,"Transform:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"export default function transformer(fileInfo, { jscodeshift: j }, options) {\n  const source = j(fileInfo.source);\n\n  // Build a new import\n  const newImport = j.importDeclaration(\n    [j.importDefaultSpecifier(j.identifier('Foo'))],\n    j.stringLiteral('bar'),\n  );\n\n  const reactImportDeclaration = source\n    .find(j.ImportDeclaration)\n    .filter(path => path.node.source.value === 'react')\n    .insertAfter(newImport); // Insert the new import after all react imports\n\n  return source.toSource();\n}\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-diff"},"import React from 'react';\n+import Foo from 'bar';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("h3",{id:"removing-an-import-declaration"},"Removing an import declaration"),Object(o.b)("p",null,"Input:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("p",null,"Transform:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"export default function transformer(fileInfo, { jscodeshift: j }, options) {\n  const source = j(fileInfo.source);\n\n  source\n    .find(j.ImportDeclaration) // Find all nodes that match a type of `ImportDeclaration`\n    .filter(path => path.node.source.value === 'react') // Filter imports by source equal to the target ie \"react\"\n    .remove(); // Removes all found import declarations\n\n  return source.toSource();\n}\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-diff"},"-import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("h3",{id:"replacing-an-import-declaration"},"Replacing an import declaration"),Object(o.b)("p",null,"Input:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("p",null,"Transform:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"export default function transformer(fileInfo, { jscodeshift: j }, options) {\n  const source = j(fileInfo.source);\n\n  const reactImports = source\n    .find(j.ImportDeclaration) // Find all nodes that match a type of `ImportDeclaration`\n    .filter(path => path.node.source.value === 'react'); // Filter imports by source equal to the target ie \"react\"\n\n  reactImports.forEach((\n    reactImport, // Iterate over react imports\n  ) =>\n    // Replace the existing node with a new one\n    j(reactImport).replaceWith(\n      // Build a new import declaration node based on the existing one\n      j.importDeclaration(\n        reactImport.node.specifiers, // copy over the existing import specificers\n        j.stringLiteral('hot-new-library'), // Replace the source with our new source\n      ),\n    ),\n  );\n\n  return source.toSource();\n}\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-diff"},"-import React from 'react';\n+import React from 'hot-new-library';\n\nconst Button = props => <button {...props} />;\n")),Object(o.b)("h2",{id:"import-specifiers"},"Import specifiers"),Object(o.b)("p",null,"Import specifiers are the actual variables and functions being imported"),Object(o.b)("h3",{id:"checking-for-an-import-specifiers"},"Checking for an import specifiers"),Object(o.b)("h3",{id:"adding-an-import-specifiers"},"Adding an import specifiers"),Object(o.b)("h3",{id:"removing-an-import-specifiers"},"Removing an import specifiers"),Object(o.b)("h3",{id:"replacing-an-import-specifiers"},"Replacing an import specifiers"),Object(o.b)("h2",{id:"default-import-specifiers"},"Default import specifiers"),Object(o.b)("h3",{id:"checking-for-an-default-import-specifiers"},"Checking for an Default import specifiers"),Object(o.b)("h3",{id:"adding-an-default-import-specifiers"},"Adding an Default import specifiers"),Object(o.b)("h3",{id:"removing-an-default-import-specifiers"},"Removing an Default import specifiers"),Object(o.b)("h3",{id:"replacing-an-default-import-specifiers"},"Replacing an Default import specifiers"))}s.isMDXComponent=!0},94:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),s=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=r,b=m["".concat(a,".").concat(f)]||m[f]||u[f]||o;return n?i.a.createElement(b,c(c({ref:t},l),{},{components:n})):i.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);